(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

document.addEventListener('DOMContentLoaded', function () {
  var counter = 0;
  var ul = document.querySelector('.cart__list');
  var listOfItem = document.querySelectorAll('.shopping-list__label');
  var deleteAllButton = document.querySelector('.cart__clear-btn');

  var resetCheckbox = function resetCheckbox(child) {
    child.checked = false;
    child.disabled = false;
    child.style.cursor = 'pointer';
  };

  var resetText = function resetText(child) {
    child.style.textDecoration = 'none';
    child.style.cursor = 'pointer';
  };

  deleteAllButton.addEventListener('click', function () {
    counter = 0;
    document.querySelector('.cart__counter').style.display = "none";
    deleteAllButton.style.display = 'none';
    ul.innerHTML = '';
    listOfItem.forEach(function (el) {
      el.removeAttribute('data-added');

      var _iterator = _createForOfIteratorHelper(el.children),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;

          if (child.classList.contains('shopping-list__checkbox')) {
            resetCheckbox(child);
          } else {
            resetText(child);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
  });

  var countItems = function countItems() {
    var deleteItem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    if (deleteItem) {
      counter = counter - 1;

      if (counter === 0) {
        document.querySelector('.cart__counter').style.display = "none";
      } else if (counter === 1) {
        document.querySelector('.cart__counter').innerHTML = counter;
        deleteAllButton.style.display = 'none';
      } else {
        document.querySelector('.cart__counter').innerHTML = counter;
        deleteAllButton.style.display = 'inline-block';
      }
    } else {
      counter = counter + 1;
      var cartCounter = document.querySelector('.cart__counter');
      cartCounter.style.display = 'block';
      cartCounter.innerHTML = counter;
      if (counter > 1) deleteAllButton.style.display = 'inline-block';
    }
  };

  ul.addEventListener('click', function (e) {
    if (e.target.parentElement.classList.contains('cart__delete')) {
      e.target.parentElement.parentElement.remove();
      countItems(true);
      getBackToTheShoppingList(e.target.parentElement.parentElement.innerText);
    }
  });

  var getBackToTheShoppingList = function getBackToTheShoppingList(name) {
    listOfItem.forEach(function (el) {
      if (el.innerText.trim() === name) {
        el.removeAttribute('data-added');

        var _iterator2 = _createForOfIteratorHelper(el.children),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;

            if (child.classList.contains('shopping-list__checkbox')) {
              resetCheckbox(child);
            } else {
              resetText(child);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    });
  };

  listOfItem.forEach(function (element) {
    element.addEventListener('click', function (e) {
      var innerText = e.target.parentElement.innerText.trim();
      var generalParentElement = e.target.parentElement;

      if (generalParentElement.classList.contains('shopping-list__label')) {
        if (!generalParentElement.dataset.added) {
          // Add element to cart
          addToCart(innerText); // Mark element as chosen

          markElement(generalParentElement);
          generalParentElement.dataset.added = true;
        }
      }
    });
  });

  var addToCart = function addToCart(name) {
    //Create "li"
    var li = document.createElement("li");
    li.className = 'cart__item';
    var span = document.createElement("span"); // Create text for the li according to what you put in the input

    li.appendChild(span);
    span.appendChild(document.createTextNode(name)); // Append or insert the new li to the ul

    ul.appendChild(li); //Create the delete button calling the funtion with the new li

    createDeleteIcon(li);
    countItems();
  };

  var markElement = function markElement(parent) {
    var _iterator3 = _createForOfIteratorHelper(parent.children),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var child = _step3.value;

        if (child.classList.contains('shopping-list__checkbox')) {
          child.checked = true;
          child.disabled = true;
          child.style.cursor = 'not-allowed';
        } else {
          child.style.textDecoration = 'line-through';
          child.style.cursor = 'not-allowed';
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  };

  var createDeleteIcon = function createDeleteIcon(parent) {
    //Create element for delete button
    var el = document.createElement("div");
    var img = document.createElement("img");
    img.src = '../img/cross.svg'; // Create and append text inside button

    el.appendChild(img); // Give class=delete to buttons - Its's going to be used to select them in the future

    el.className = "cart__delete"; // append or insert the button to the parent element(li)

    parent.appendChild(el);
  };
});

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
